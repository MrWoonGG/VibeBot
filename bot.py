# VibeBot
# Code version: 1.0
# Made by MrWoon (https://kanokadev.top) for Selen

import asyncio
import logging
import config
import time
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from typing import Callable, Dict, Awaitable, Any
from handlers import start, ankets, settings, stats, admin
from handlers.ankets import AnketaRouter

# --- –í—Ä—É–±–∏–º –ª–æ–≥–≥–∏–Ω–≥ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger(__name__)

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === –ê–ù–¢–ò–°–ü–ê–ú ===
class AntiFloodMiddleware(BaseMiddleware):
    def __init__(self, cooldown: float = 1.0):
        super().__init__()
        self.cooldown = cooldown
        self.user_timestamps: Dict[int, float] = {}
        self.user_media_count: Dict[int, int] = {}
        self.user_last_media_time: Dict[int, float] = {}

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        user_id = event.from_user.id
        now = time.time()
        last_time = self.user_timestamps.get(user_id, 0)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫–∏, –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Ç.–ø.)
        is_media = any([
            event.photo,
            event.video,
            event.document,
            event.animation,
            event.video_note,
            event.voice
        ])

        if is_media:
            last_media_time = self.user_last_media_time.get(user_id, 0)
            media_count = self.user_media_count.get(user_id, 0)

            # –µ—Å–ª–∏ –º–µ–∂–¥—É –º–µ–¥–∏–∞ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å–µ–∫—É–Ω–¥—ã ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫
            if now - last_media_time > 1.5:
                media_count = 0

            media_count += 1
            self.user_media_count[user_id] = media_count
            self.user_last_media_time[user_id] = now

            if media_count <= 5:
                return await handler(event, data)  # —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ 5 –ø–æ–¥—Ä—è–¥

            # –µ—Å–ª–∏ >5 –ø–æ–¥—Ä—è–¥ ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if now - last_time < self.cooldown:
                return await event.answer("–º–µ–¥–∏–∞ —Å–ø–∞–º–∏—à—å :< –ø–µ—Ä–µ–¥–æ—Ö–Ω–∏ —á—É—Ç—å")

        else:
            # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–µ–¥–∏–∞ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ–¥–∏–∞-—Å—á—ë—Ç—á–∏–∫
            self.user_media_count[user_id] = 0
            self.user_last_media_time[user_id] = 0

            if now - last_time < self.cooldown:
                return await event.answer("–Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –ø–∂ :<")

        self.user_timestamps[user_id] = now
        return await handler(event, data)

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –õ–ï–í–û–ì–û –¢–ï–ö–°–¢–ê ===
# @dp.message(F.text)
# async def unknown_command_handler(msg: Message):
#     if msg.text.startswith('/'): return
#     await msg.answer("–ù–∏—á–æ –Ω–µ –ø–æ–Ω—è–ª üòµ‚Äçüí´\n–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–± –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ø–æ–¥–∫–ª—é—á–∞–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    dp.message.middleware(AntiFloodMiddleware(cooldown=1.0))

    # –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(start.router)
    ankets = AnketaRouter(bot)
    dp.include_router(ankets.router)
    dp.include_router(settings.router)
    dp.include_router(stats.stats_router)
    dp.include_router(admin.router)
    logger.info("–†–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())

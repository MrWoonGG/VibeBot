from aiogram import Router, F
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from common.models import User, Gender, Hobby, Orientation, Filters, Geo, FType
from common.keyboards import settings_kb, back_kb, gender_kb, fgender_kb, orientation_kb, s_kb, admin_kb
from database import DB
from utils.geo import validate_city
from common.states import AdminPanel
import time
import re
import os
import psutil
import platform
import shutil

router = Router()

# === ADMIN PANEL ===
@router.message(Command('modpanel'))
async def modpanel(msg: Message):
    user = User.get(tg_id=msg.from_user.id)
    if user.role == "user":
        await msg.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ –≤—ã—à–µ.")
        return

    await msg.answer('''–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥:
/modpanel <=> –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥-–ø–∞–Ω–µ–ª—å (moderator+)
/start <=> –í—ã–π—Ç–∏ –∏–∑ –º–æ–¥-–ø–∞–Ω–µ–ª–∏
/getid [*username*] <=> –ü–æ–ª—É—á–∏—Ç—å –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (moderator+)
/setrole [user/moderator/admin/owner] <=> –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (admin+)
/delete [*username*/*tg_id*] <=> –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/ban [*username*/*tg_id*] <=> –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ —é–∑—É –∏–ª–∏ –∞–π–¥–∏ (–ª—É—á—à–µ –∞–π–¥–∏) (moderator+)
/sendall [*text*] <=> –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (admin+)
''', reply_markup=admin_kb)

# === /runsql ===
@router.message(Command("runsql"))
async def run_sql(msg: Message):
    user = User.get(tg_id=msg.from_user.id)
    if user.role != "dev":
        if msg.from_user.username != "xeonisgood":
            return await msg.answer("–Ω–µ–ª—å–∑—è, —Ç–æ–ª—å–∫–æ –¥–ª—è dev'–æ–≤ üòº")

    sql = msg.text.removeprefix("/runsql").strip()
    if not sql:
        return await msg.answer("SQL –≥–¥–µ?")

    db = DB.get()
    try:
        if sql.lower().startswith("select"):
            rows = db.query(sql)
            if not rows:
                return await msg.answer("–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            preview = "\n".join(str(dict(row)) for row in rows[:10])  # –ø–æ–∫–∞–∂–µ—Ç –º–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–æ–∫
            await msg.answer(f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n<code>{preview}</code>", parse_mode="HTML")
        else:
            db.execute(sql)
            await msg.answer("‚úÖ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<code>{str(e)}</code>", parse_mode="HTML")


@router.message(Command("getid"))
async def get_id_cmd(msg: Message, command: CommandObject):
    if not command.args:
        return await msg.reply("—É–∫–∞–∂–∏ —é–∑–µ—Ä–Ω–µ–π–º, —Ç–∏–ø–æ —Ç–∞–∫: /getid @someone")

    username = command.args.strip().lstrip("@")
    try:
        user_obj = await msg.bot.get_chat(username)
        await msg.reply(f"–∞–π–¥–∏ —é–∑–µ—Ä–∞ @{username}: <code>{user_obj.id}</code>")
    except Exception as e:
        print(e)
        await msg.reply(f"–Ω–µ –Ω–∞—à—ë–ª —é–∑–µ—Ä–∞ @{username} (–∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)")



# –∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ –±–∞–Ω
@router.message(F.text == "–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def ban_stub(msg: Message):
    await msg.answer("–±–∞–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, —Å–∫–æ—Ä–æ —Å–¥–µ–ª–∞—é üõ†Ô∏è")


# –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
@router.message(F.text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
async def restart_bot(msg: Message):
    user = User.get(tg_id=msg.from_user.id)
    if user.role != "dev":
        return await msg.answer("–Ω–µ–ª—å–∑—è, —Ç–æ–ª—å–∫–æ –¥–µ–≤ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å üòº")

    await msg.answer("–±–æ—Ç —É—Ö–æ–¥–∏—Ç —Å–ø–∞—Ç—å... üí§")
    os._exit(0)

# === –¢–ï–•. –°–¢–ê–¢–´ ===
@router.message(F.text=="–¢–µ—Ö. –°—Ç–∞—Ç—ã")
async def tech_stats(msg: Message):
    # –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_count = len(User.get_all())

    # –∏–Ω—Ñ–∞ –ø–æ RAM
    vm = psutil.virtual_memory()
    ram_total = round(vm.total / (1024**3), 2)
    ram_used = round(vm.used / (1024**3), 2)
    ram_percent = vm.percent

    # –∏–Ω—Ñ–∞ –ø–æ CPU
    cpu_percent = psutil.cpu_percent(interval=1)
    cpu_cores = psutil.cpu_count(logical=False)
    cpu_threads = psutil.cpu_count(logical=True)

    # –∏–Ω—Ñ–∞ –ø–æ –¥–∏—Å–∫—É
    disk = shutil.disk_usage("/")
    disk_total = round(disk.total / (1024**3), 2)
    disk_used = round(disk.used / (1024**3), 2)
    disk_percent = round((disk.used / disk.total) * 100, 1)

    # –∞–ø—Ç–∞–π–º
    uptime_seconds = int(psutil.boot_time())
    import datetime
    uptime_str = datetime.datetime.fromtimestamp(uptime_seconds).strftime("%Y-%m-%d %H:%M:%S")

    # —Å–∏—Å—Ç–µ–º–∞
    sys_info = f"{platform.system()} {platform.release()} ({platform.machine()})"

    # –∏–Ω—Ñ–∞ –ø–æ –∫–µ—à—É –±–¥ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å (MySQL ‚Äî –ø—Ä–æ—Å—Ç–æ connection pool –º–æ–∂–µ—à—å –≥–ª—è–Ω—É—Ç—å)
    # –¥–æ–ø–∏—à–∏, –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–≤–æ–π –∫–µ—à (–Ω–∞–ø—Ä–∏–º–µ—Ä, Redis –∏–ª–∏ —Å–≤–æ–π –∫—ç—à-–æ–±—ä–µ–∫—Ç)

    text = f"""<b>üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—ã:</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: <code>{user_count}</code>

üß† –û–ó–£: <code>{ram_used}–ì–ë / {ram_total}–ì–ë</code> ({ram_percent}%)
üíΩ –î–∏—Å–∫: <code>{disk_used}–ì–ë / {disk_total}–ì–ë</code> ({disk_percent}%)
‚öôÔ∏è CPU: <code>{cpu_percent}%</code> | –Ø–¥–µ—Ä: {cpu_cores} | –ü–æ—Ç–æ–∫–æ–≤: {cpu_threads}

üîß –°–∏—Å—Ç–µ–º–∞: <code>{sys_info}</code>
üïí –ê–ø—Ç–∞–π–º —Å: <code>{uptime_str}</code>
"""

    await msg.answer(text, parse_mode="HTML")

# == –û–ë–¨–Ø–í–õ–ï–ù–ò–Ø ===
@router.message(Command("sendall"))
async def send_to_all(msg: Message):
    user = User.get(tg_id=msg.from_user.id)
    if user.role not in ["admin", "owner", "dev"]:
        await msg.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ –≤—ã—à–µ.")
        return

    text = msg.text.removeprefix("/sendall").strip()
    if not text:
        return await msg.answer("–∞ —Ç–µ–∫—Å—Ç –≥–¥–µ?")

    users = User.get_all()
    sent, failed = 0, 0

    for user in users:
        try:
            await msg.bot.send_message(user.tg_id, text)
            sent += 1
        except TelegramAPIError:
            failed += 1

    await msg.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ üéâ\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}", reply_markup=admin_kb)

@router.message(F.text.in_(["–û–±—å—è–≤–ª–µ–Ω–∏–µ"]))
async def send_all(msg: Message, state: FSMContext):
    user = User.get(tg_id=msg.from_user.id)
    if user.role not in ["admin", "owner", "dev"]:
        await msg.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ –≤—ã—à–µ.")
        return
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", reply_markup=back_kb)
    await state.set_state(AdminPanel.waiting_sendallmsg)

@router.message(AdminPanel.waiting_sendallmsg)
async def process_send_all(msg: Message, state: FSMContext):
    text = msg.text.strip()
    await state.update_data(msg=text)
    if not text:
        return await msg.answer("–∞ —Ç–µ–∫—Å—Ç –≥–¥–µ?")

    users = User.get_all()
    sent, failed = 0, 0

    for user in users:
        try:
            await msg.bot.send_message(user.tg_id, text)
            sent += 1
        except TelegramAPIError:
            failed += 1

    await msg.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ üéâ\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}", reply_markup=admin_kb)

    await state.clear()
    return None
from aiogram import Router, F
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command

import config
from common.states import Registration
import common.keyboards as keyboards
from aiogram.fsm.context  import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from common.models import User, Geo, Filters, Gender, Hobby, Orientation, Role, FType
from utils.geo import validate_city
import time
import re
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import DB

router = Router()

def hobby_filter_kb(selected=None):
    if selected is None:
        selected = []

    rows = []
    row = []

    for hobby in Hobby:
        text = f"‚úÖ {hobby.value}" if hobby in selected else hobby.value
        row.append(KeyboardButton(text=text))
        if len(row) == 2:
            rows.append(row)
            row = []

    if row:
        rows.append(row)

    rows.append([KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

def hobby_kb(selected=None):
    if selected is None:
        selected = []

    rows = []
    row = []

    for hobby in Hobby:
        text = f"‚úÖ {hobby.value}" if hobby.value in selected else hobby.value
        row.append(KeyboardButton(text=text))
        if len(row) == 2:
            rows.append(row)
            row = []

    if row:
        rows.append(row)

    # –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
    rows.append([KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


@router.message(Command("sendall"))
async def send_to_all(msg: Message):
    if msg.from_user.username != "xeonisgood":
        return await msg.answer("–Ω–µ–ª—å–∑—è, –Ω–µ –¥–æ—Ä–æ—Å üòº")

    text = msg.text.removeprefix("/sendall").strip()
    if not text:
        return await msg.answer("–∞ —Ç–µ–∫—Å—Ç –≥–¥–µ?")

    users = User.get_all()
    sent, failed = 0, 0

    for user in users:
        try:
            await msg.bot.send_message(user.tg_id, text)
            sent += 1
        except TelegramAPIError:
            failed += 1

    await msg.answer(f"—Ä–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ üéâ\n—É—Å–ø–µ—à–Ω–æ: {sent}\n–æ—à–∏–±–æ–∫: {failed}")

# --- —Å—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
@router.message(F.text.in_(["üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start"]))
async def cmd_register(msg: Message, state: FSMContext):
    await state.clear()
    user = User.get(tg_id=msg.from_user.id)
    if user:
        await msg.answer(f'''{config.BOT_NAME} v{config.BOT_VERSION}. Dev by @xeonisgood
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ûï –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∞–Ω–∫–µ—Ç—ã —á—Ç–æ-–±—ã –Ω–∞—á–∞—Ç—å –ª–∞–π–∫–∞—Ç—å/–¥–∏–∑–ª–∞–π–∫–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –∏ –Ω–∞–π—Ç–∏ —Å–≤–æ–∏—Ö :)
''', reply_markup=keyboards.main_kb)
        if user.role in ["admin","owner","dev"]:
            await msg.answer(f"–ú–æ–¥-–ü–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /modpanel\n(–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≤—ã—à–µ)")
        return
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Registration.waiting_name)

# --- –∏–º—è ---
@router.message(Registration.waiting_name)
async def process_name(msg: Message, state: FSMContext):
    name = msg.text.strip()

    if len(name) > 20:
        await msg.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    if not re.fullmatch(r"[a-zA-Z–∞-—è–ê-–Ø—ë–Å]+", name):
        await msg.answer("–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (a-z, –∞-—è)")
        return

    await state.update_data(name=name)
    await msg.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑–≤—Ä–∞—Å—Ç", reply_markup=keyboards.back_kb)
    await state.set_state(Registration.waiting_age)

# --- –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ---
@router.message(Registration.waiting_age)
async def process_age(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è", reply_markup=keyboards.back_kb)
        await state.set_state(Registration.waiting_name)
        return
    try:
        age = int(msg.text.strip())
        if not (9 <= age <= 99):
            raise ValueError()
    except:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
        return

    await state.update_data(age=age)
    await msg.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª", reply_markup=keyboards.gender_kb)
    await state.set_state(Registration.waiting_sex)


# --- –ø–æ–ª ---
@router.message(Registration.waiting_sex)
async def process_sex(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑–≤—Ä–∞—Å—Ç", reply_markup=None)
        await state.set_state(Registration.waiting_age)
        return
    sex_value = msg.text.strip()
    gender = next((g for g in Gender if g.value == sex_value), None)
    if gender is None:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª. –í—ã–±–µ—Ä–∏ –µ–≥–æ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
        return
    await state.update_data(sex=sex_value)
    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–∏–µ–≤)", reply_markup=keyboards.back_kb)
    await state.set_state(Registration.waiting_city)

# --- –≥–æ—Ä–æ–¥ ---
@router.message(Registration.waiting_city)
async def process_city(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª", reply_markup=keyboards.gender_kb)
        await state.set_state(Registration.waiting_sex)
        return

    geo = validate_city(msg.text)
    if geo is None:
        await msg.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
        return

    await state.update_data(geo=geo)
    await msg.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —Ö–æ–±–±–∏ –∫–Ω–æ–ø–æ—á–∫–∞–º–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ",
                     reply_markup=hobby_kb())
    await state.set_state(Registration.waiting_hobby_button)
    await state.update_data(hobby=[])


# --- —Ö–æ–±–±–∏ ---
@router.message(F.text, Registration.waiting_hobby_button)
async def hobby_toggle(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(Registration.waiting_city)
        await msg.answer("–û–∫, –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –µ—â—ë —Ä–∞–∑", reply_markup=keyboards.back_kb)
        return

    if msg.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        data = await state.get_data()
        if not data.get("hobby") or data.get("hobby") == []:
            await msg.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ö–æ–±–±–∏ üò≠")
            return
        await state.set_state(Registration.waiting_orientation)
        await msg.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=keyboards.orientation_kb)
        return

    hobby_value = re.sub(r"^(‚úÖ\s*)+", "", msg.text).strip()
    data = await state.get_data()
    current = data.get("hobby", [])

    hobby = next((h for h in Hobby if h.value == hobby_value), None)
    if not hobby:
        await msg.answer("–í—ã–±–µ—Ä–∏ —Ö–æ–±–±–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=hobby_kb(current))
        return

    if hobby_value in current:
        current.remove(hobby_value)
    else:
        current.append(hobby_value)
    
    await state.update_data(hobby=current)
    await msg.answer("–•–æ–±–±–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=hobby_kb(current))


# --- –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è ---
@router.message(Registration.waiting_orientation)
async def process_orientation(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —Ö–æ–±–±–∏ –∫–Ω–æ–ø–æ—á–∫–∞–º–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ",
                         reply_markup=hobby_kb())
        await state.set_state(Registration.waiting_hobby_button)
        await state.update_data(hobby=[])
        return
    ori = msg.text
    if ori not in [o.value for o in Orientation]:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è, –≤—ã–±–µ—Ä–∏ –µ—ë –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
        return
    await state.update_data(orientation=ori)
    await msg.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–±–∏–æ)", reply_markup=keyboards.back_kb)
    await state.set_state(Registration.waiting_bio)

# --- –±–∏–æ ---
@router.message(Registration.waiting_bio)
async def process_bio(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–ê –∫–∞–∫–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è?", reply_markup=keyboards.orientation_kb)
        await state.set_state(Registration.waiting_orientation)
        return
    bio = msg.text.strip()

    if len(bio) > 1500:
        await msg.answer("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    if not re.fullmatch(r"^[^<>\/\\]+$", bio):
        await msg.answer("–ë–∏–æ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã: < > / \\")
        return

    await state.update_data(bio=bio)
    await msg.answer("–ü—Ä–∏—à–ª–∏ –¥–æ 4 —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ (–¢–û–õ–¨–ö–û –ë–´–°–¢–†–û–ô –û–¢–ü–†–ê–í–ö–û–ô)", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
        one_time_keyboard=True
    ))
    await state.set_state(Registration.waiting_media)

# –ú–µ–¥–∏–∞
@router.message(Registration.waiting_media, F.content_type.in_(["photo","video"]))
async def media_upload(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–•–æ—Ä–æ—à–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –µ—â—ë —Ä–∞–∑")
        await state.set_state(Registration.waiting_bio)
        return
    data = await state.get_data()
    media = data.get("media", [])
    if len(media) >= 4:
        await msg.answer("–£–∂–µ –µ—Å—Ç—å 4 –º–µ–¥–∏–∞, –∂–º–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å)")
        return
    fid = msg.photo[-1].file_id if msg.photo else msg.video.file_id
    media.append(fid)
    await state.update_data(media=media)
    await msg.answer(f"–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ –º–µ–¥–∏–∞, –º–æ–∂–Ω–æ –µ—â—ë {4-len(media)}")

@router.message(Registration.waiting_media, F.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
async def media_done(msg: Message, state: FSMContext):
    await msg.answer("–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç –ª—é–¥–µ–π –≤ –∞–Ω–∫–µ—Ç–∞—Ö –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –û–¢-–î–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18-25)", reply_markup=keyboards.back_kb)
    await state.set_state(Registration.waiting_filters_age)

@router.message(Registration.waiting_media, F.text == "üîô –ù–∞–∑–∞–¥")
async def media_back(msg: Message, state: FSMContext):
    await msg.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–±–∏–æ)", reply_markup=keyboards.back_kb)
    await state.set_state(Registration.waiting_bio)


# --- —Ñ–∏–ª—å—Ç—Ä –≤–æ–∑—Ä–∞—Å—Ç ---
@router.message(Registration.waiting_filters_age)
async def process_filters_age(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–ü—Ä–∏—à–ª–∏ –¥–æ 4 —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ (–¢–û–õ–¨–ö–û –ë–´–°–¢–†–û–ô –û–¢–ü–†–ê–í–ö–û–ô)", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
            resize_keyboard=True,
            one_time_keyboard=True
        ))
        await state.set_state(Registration.waiting_media)
        return

    try:
        from_age, to_age = msg.text.strip().split("-")
        from_age, to_age = [int(from_age), int(to_age)]
        if from_age > to_age or from_age < 9:
            raise ValueError()
    except:
        await msg.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–¥–∏—É—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 18-25), –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
        return

    await state.update_data(filters_age=msg.text.strip())
    await msg.answer("–ê –∫–æ–≥–æ –∏—â–µ—à—å?", reply_markup=keyboards.fgender_kb)
    await state.set_state(Registration.waiting_filters_sex)


# --- —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª ---
@router.message(Registration.waiting_filters_sex)
async def process_filters_sex(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä 18-25)", reply_markup=keyboards.back_kb)
        await state.set_state(Registration.waiting_filters_age)
        return

    sex_value = msg.text.strip()
    if sex_value != "–ù–µ –≤–∞–∂–Ω–æ":
        gender = next((g for g in Gender if g.value == sex_value), None)
        if gender is None:
            await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª. –í—ã–±–µ—Ä–∏ –µ–≥–æ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
            return
        sex_value = [sex_value]
    else:
        sex_value = ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–î—Ä—É–≥–æ–µ"]

    await state.update_data(filters_sex=sex_value)
    await msg.answer("–í—ã–±–µ—Ä–∏ —Ö–æ–±–±–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–Ω–æ–ø–æ—á–∫–∞–º–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ",
                     reply_markup=hobby_kb())
    await state.set_state(Registration.waiting_filters_hobby)
    await state.update_data(filters_hobby=[])


# --- —Ñ–∏–ª—å—Ç—Ä —Ö–æ–±–±–∏ ---
@router.message(Registration.waiting_filters_hobby)
async def process_filters_hobby_buttons(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–ê –∫–æ–≥–æ –∏—â–µ—à—å? (–ú–∞–ª—å—á–∏–∫–∞/–î–µ–≤–æ—á–∫—É/–õ–∞–º–ø—É)", reply_markup=keyboards.fgender_kb)
        await state.set_state(Registration.waiting_filters_sex)
        return

    if msg.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        data = await state.get_data()
        if not data.get("filters_hobby") or data.get('filters_hobby') == []:
            await msg.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ö–æ–±–±–∏ üò≠")
            return
        await msg.answer("–ê —á—Ç–æ —Ç—ã –∏—â–µ—à—å?", reply_markup=keyboards.s_kb)
        await state.set_state(Registration.waiting_filters_ftype)
        return

    hobby = next((h for h in Hobby if h.value == re.sub(r"^(‚úÖ\s*)+", "", msg.text).strip()), None)
    if not hobby:
        data = await state.get_data()
        selected = data.get("filters_hobby", [])
        await msg.answer("–í—ã–±–µ—Ä–∏ —Ö–æ–±–±–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∞–º–∏ üòÖ", reply_markup=hobby_filter_kb(selected))
        return

    data = await state.get_data()
    selected = data.get("filters_hobby", [])

    if hobby in selected:
        selected.remove(hobby)
    else:
        selected.append(hobby)

    await state.update_data(filters_hobby=selected)
    await msg.answer("–•–æ–±–±–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=hobby_filter_kb(selected))


# --- —Ñ–∏–ª—å—Ç—Ä: —á—Ç–æ –∏—â–µ—à—å ---
@router.message(Registration.waiting_filters_ftype)
async def process_filters_ftype(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        AVAILABLE_HOBBIES = [hobby.value for hobby in Hobby]
        HOBBY_HINT = f"(–í–æ–∑–º–æ–∂–Ω—ã–µ: {', '.join(AVAILABLE_HOBBIES)})"
        await msg.answer("–í—ã–±–µ—Ä–∏ —Ö–æ–±–±–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).\n" + HOBBY_HINT, reply_markup=keyboards.back_kb)
        await state.set_state(Registration.waiting_filters_hobby)
        return

    text = msg.text.strip().lower()

    if text == "—á—Ç–æ —É–≥–æ–¥–Ω–æ":
        selected_ftypes = ["–û–±—â–µ–Ω–∏–µ", "–û—Ç–Ω–æ—à–µ–Ω–∏—è"]
    elif text == "–æ–±—â–µ–Ω–∏–µ":
        selected_ftypes = ["–û–±—â–µ–Ω–∏–µ"]
    elif text == "–æ—Ç–Ω–æ—à–µ–Ω–∏—è":
        selected_ftypes = ["–û—Ç–Ω–æ—à–µ–Ω–∏—è"]
    else:
        await msg.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=keyboards.s_kb)
        return

    await state.update_data(filters_ftype=selected_ftypes)

    data = await state.get_data()

    sex_list = []
    for g in data["filters_sex"]:
        sex_list.append(Gender(g) if isinstance(g, str) else g)

    ftype_list = []
    for f in selected_ftypes:
        ftype_list.append(FType(f) if isinstance(f, str) else f)

    print(sex_list)
    print(ftype_list)
    filters = Filters(
        geo=Geo(**data["geo"]),
        age_from=int(data["filters_age"].split("-")[0]),
        age_to=int(data["filters_age"].split("-")[1]),
        sex=sex_list,
        hobby=data["filters_hobby"],
        ftype=ftype_list
    )

    await state.update_data(filters=filters.dict())

    User.create(
        tg_id=msg.from_user.id,
        role=Role.user,
        name=data["name"],
        geo=data["geo"],
        filters=filters.model_dump(),
        age=data["age"],
        sex=data["sex"],
        hobby=data["hobby"],
        bio=data["bio"],
        orientation=data["orientation"],
        media=data.get("media", []),
        registered_at=int(time.time())
    )

    await msg.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ûï –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∞–Ω–∫–µ—Ç—ã —á—Ç–æ-–±—ã –Ω–∞—á–∞—Ç—å –ª–∞–π–∫–∞—Ç—å/–¥–∏–∑–ª–∞–π–∫–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –∏ –Ω–∞–π—Ç–∏ —Å–≤–æ–∏—Ö :).", reply_markup=keyboards.main_kb)
    await state.clear()

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaVideo, \
    InputMediaPhoto
from aiogram.exceptions import TelegramBadRequest

from common import keyboards
from common.models import User, Anketa
from common.keyboards import reactions_kb
import config

class AnketaRouter:
    def __init__(self, bot):
        self.bot = bot
        self.router = Router()
        self.router.message.register(self._anketka, F.text.in_(["üìÑ –ü—Ä–æ—Ñ–∏–ª—å"]))
        self.router.message.register(self._random_anketa, F.text == "‚ûï –ü—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∞–Ω–∫–µ—Ç—ã")
        self.router.callback_query.register(self._handle_reaction, F.data.startswith("reaction_"))
        self.router.message.register(self._show_likes, F.text == "üëç –í–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏")

    async def _show_likes(self, msg: Message):
        user = User.get(msg.from_user.id)
        if not user:
            return await msg.answer("—Ç—ã –Ω–µ –∑–∞—Ä–µ“ë–∞–Ω–∏–π...")

        ank = Anketa(user)
        mliked = ank.get_mutual_likes()

        text = "<b>üíô –í–æ—Ç —Ç–≤–æ–∏ –≤–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏:</b>\n"
        if mliked:
            for u in mliked[-10:]:
                text += f"‚Ä¢ {u.name} (@{(await self.bot.get_chat(u.tg_id)).username or '–Ω–µ—Ç—é–∑–µ—Ä–∞'})\n"
        else:
            text += "–∞ –∏—Ö –Ω–µ—Ç—É ü§∑\n"

        await msg.answer(text, parse_mode="HTML", reply_markup=keyboards.main_kb)

    async def send_anketa(self, chat, user: User, show_reactions=True, show_username=False, mutual=False):
        # chat –º–æ–∂–µ—Ç –±—ã—Ç—å int (chat_id) –∏–ª–∏ Message
        media_ids = user.media or []

        loc = (
            f"{''.join([chr(0x1F1E6 + ord(c.upper()) - ord('A')) for c in (user.geo.country_code or '')[:2]]) or 'üåç'} {user.geo.country}, {user.geo.city}"
            if user.geo.city else "üåç ?"
        )

        try:
            user_obj = await self.bot.get_chat(user.tg_id)
            username = user_obj.username if mutual and user_obj.username else None
            uname = f" (@{username})" if username else ""
        except TelegramBadRequest:
            uname = ""

        us = "–û–±—â–µ–Ω–∏–µ –∏–ª–∏ –û—Ç–Ω–æ—à–µ–Ω–∏—è" if len(user.filters.ftype) >= 2 else user.filters.ftype[0].value
        text = (
            f"üë§ <b>{user.name}</b>{uname}\n"
            f"‚û°Ô∏è <b>–ò—â–µ—Ç</b> {us}\n\n"
            f"üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {loc}\n"
            f"üìÖ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user.age}\n"
            f"‚öß <b>–ü–æ–ª:</b> {user.sex.value}\n"
            f"‚öß <b>–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è:</b> {user.orientation.value}\n"
            f"üé® <b>–•–æ–±–±–∏:</b> {', '.join(user.hobby) if user.hobby else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
            f"üí¨ <b>–û —Å–µ–±–µ:</b>\n{user.bio or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )

        reply_to = None
        if media_ids:
            album = []
            for fid in media_ids[:10]:
                if not fid.startswith("BAAC"):
                    album.append(InputMediaPhoto(media=fid))
                else:
                    album.append(InputMediaVideo(media=fid))
            if isinstance(chat, (int, str)):  # chat_id
                sent = await self.bot.send_media_group(chat_id=chat, media=album)
                reply_to = sent[0].message_id
            else:
                sent = await chat.answer_media_group(album)
                reply_to = sent[0].message_id

        if isinstance(chat, (int, str)):
            await self.bot.send_message(
                chat_id=chat,
                text=text,
                reply_markup=reactions_kb(user.tg_id) if show_reactions else None,
                parse_mode="HTML",
                reply_to_message_id=reply_to,
            )
        else:
            await chat.answer(
                text,
                reply_markup=reactions_kb(user.tg_id) if show_reactions else None,
                parse_mode="HTML",
                reply_to_message_id=reply_to,
            )

    async def _handle_reaction(self, callback: CallbackQuery):
        action, user_id_str = callback.data.split(":")
        to_id = int(user_id_str)
        from_id = callback.from_user.id

        if to_id == from_id:
            await callback.answer("–≠—Ç–æ —Ç—ã —Å–∞–º, –Ω–µ –ª–∞–π–∫–∞–π —Å–µ–±—è! ü§°", show_alert=True)
            return

        user_to = User.get(to_id)
        user_from = User.get(from_id)
        if not user_to or not user_from:
            await callback.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ —Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            return

        anketa_to = Anketa(user_to)
        anketa_from = Anketa(user_from)

        if action == "reaction_like":
            liked_first_time = anketa_to.add_like(from_id)

            mutual = Anketa.is_mutual_like(from_id, to_id)
            if mutual:
                await callback.answer("–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫! üéâ")
                try:
                    username_from = (await self.bot.get_chat(from_id)).username or ""
                    username_to = (await self.bot.get_chat(to_id)).username or ""
                    if username_from:
                        await self.bot.send_message(
                            from_id,
                            f"–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å @{username_to}! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è üòâ"
                        )
                    if username_to:
                        await self.bot.send_message(
                            to_id,
                            f"–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å @{username_from}! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è üòâ"
                        )
                except TelegramBadRequest:
                    pass

                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—ã –æ–±–æ–∏–º –Ω–∞–ø—Ä—è–º—É—é –≤ –∏—Ö —á–∞—Ç—ã (chat_id)
                await self.send_anketa(from_id, user_to, show_reactions=False, show_username=True, mutual=True)
                await self.send_anketa(to_id, user_from, show_reactions=False, show_username=True, mutual=True)
                return
            else:
                await callback.answer("–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!")
                try:
                    await self.bot.send_message(
                        to_id,
                        f"–¢–µ–±—è –ª–∞–π–∫–Ω—É–ª {user_from.name}! –ú–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫."
                    )
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ **–≤ —á–∞—Ç —Ç–æ–≥–æ, –∫–æ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏**
                    await self.send_anketa(to_id, user_from, show_reactions=True, show_username=False, mutual=False)
                except TelegramBadRequest:
                    pass

            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∞–π–∫–Ω—É–≤—à–µ–º—É –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É (–æ—Ç–≤–µ—Ç–æ–º –≤ —á–∞—Ç, –≥–¥–µ –∫–æ–ª–ª–±–µ–∫)
            await self._send_next_anketa(callback.message, from_id, exclude_ids=[from_id, to_id])

        elif action == "reaction_dislike":
            await callback.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")
            await self._send_next_anketa(callback.message, from_id, exclude_ids=[from_id, to_id])

    async def _send_anketa_by_id(self, message, user_id: int, show_user_id: int, mutual: bool):
        user = User.get(show_user_id)
        if not user:
            await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        await self.send_anketa(message, user, show_reactions=True, show_username=mutual, mutual=mutual)

    async def _send_next_anketa(self, message_or_chat_id, user_id: int, exclude_ids=None):
        exclude_ids = exclude_ids or []
        user = User.get(user_id)
        if not user:
            if isinstance(message_or_chat_id, (int, str)):
                await self.bot.send_message(message_or_chat_id, "–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            else:
                await message_or_chat_id.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            return

        ankets = Anketa.search(filters=user.filters, exclude_ids=exclude_ids, limit=1)
        if not ankets:
            if isinstance(message_or_chat_id, (int, str)):
                await self.bot.send_message(message_or_chat_id, "–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
            else:
                await message_or_chat_id.answer("–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
            return

        found = ankets[0]
        await self.send_anketa(message_or_chat_id, found.owner_user, show_reactions=True, show_username=False, mutual=False)

    async def _anketka(self, msg: Message):
        user = User.get(msg.from_user.id)
        if not user:
            return await msg.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω...")
        await self.send_anketa(msg, user, show_reactions=False, show_username=True, mutual=False)

    async def _random_anketa(self, msg: Message):
        user = User.get(msg.from_user.id)
        if not user:
            return await msg.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω...")

        exclude_ids = [user.tg_id]
        ankets = Anketa.search(filters=user.filters, exclude_ids=exclude_ids, limit=1)

        if not ankets:
            await msg.answer("–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
            return

        found = ankets[0]
        await self.send_anketa(msg, found.owner_user, show_reactions=True, show_username=False, mutual=False)

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from common.models import User, Gender, Hobby, Orientation, Filters, Geo, FType
from common.keyboards import settings_kb, back_kb, gender_kb, fgender_kb, orientation_kb, s_kb
from utils.geo import validate_city
from common.states import Settings
import time
import re

router = Router()

def filters_hobby_kb(selected=None):
    if selected is None:
        selected = []

    rows = []
    row = []

    for hobby in Hobby:
        text = f"‚úÖ {hobby.value}" if hobby in selected else hobby.value
        row.append(KeyboardButton(text=text))
        if len(row) == 2:
            rows.append(row)
            row = []

    if row:
        rows.append(row)

    rows.append([KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

def hobby_kb(selected=None):
    if selected is None:
        selected = []

    rows = []
    row = []

    for hobby in Hobby:
        text = f"‚úÖ {hobby.value}" if hobby.value in selected else hobby.value
        row.append(KeyboardButton(text=text))
        if len(row) == 2:
            rows.append(row)
            row = []

    if row:
        rows.append(row)

    # –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
    rows.append([KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

# —Å—Ç–∞—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
@router.message(lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_start(msg: Message, state: FSMContext):
    user = User.get(tg_id=msg.from_user.id)
    if not user:
        await msg.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return
    await msg.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=settings_kb)
    await state.set_state(Settings.choosing_action)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.message(Settings.choosing_action)
async def settings_choice(msg: Message, state: FSMContext):
    text = msg.text

    if text == "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ":
        data = await state.get_data()
        media = data.get("media", None)
        if media is None:
            media = []
            await state.update_data(media=media)
        await msg.answer(
            f"–ü—Ä–∏—à–ª–∏ –¥–æ 4 —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ (–¢–û–õ–¨–ö–û –ë–´–°–¢–†–û–ô –û–¢–ü–†–ê–í–ö–û–ô)",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        await state.set_state(Settings.editing_media)

    elif text == "üìë –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã":
        await msg.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –±–∏–æ", reply_markup=back_kb)
        await state.set_state(Settings.editing_bio)

    elif text == "üß™ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã":
        await msg.answer("–í—ã–±–µ—Ä–∏ —á—Ç–æ –º–µ–Ω—è—Ç—å:", reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç"), KeyboardButton(text="–ü–æ–ª")],
                [KeyboardButton(text="–•–æ–±–±–∏"), KeyboardButton(text="–¶–µ–ª–∏")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        ))
        await state.set_state(Settings.choosing_action)  # –æ—Å—Ç–∞–≤–∏–º –≤ —Ç–æ–º –∂–µ, —á—Ç–æ–± –ª–æ–≤–∏—Ç—å –ø–æ–¥–º–µ–Ω—é

    elif text == "üîû –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Å—Ç":
        await msg.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=back_kb)
        await state.set_state(Settings.editing_age)

    elif text == "‚ùå –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ (–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–∞–π–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è)":
        await msg.answer(
            '–ï—Å–ª–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚Äî –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ "—É–¥–∞–ª–∏—Ç—å".\n–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî –Ω–∞–ø–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –¥—Ä—É–≥–æ–µ.',
            reply_markup=back_kb)
        await state.set_state(Settings.awaiting_delete_confirm_text)

    elif text == "–í–æ–∑—Ä–∞—Å—Ç":
        await msg.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä 18-25)", reply_markup=back_kb)
        await state.set_state(Settings.editing_filters_age)

    elif text == "–ü–æ–ª":
        await msg.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞", reply_markup=fgender_kb)
        await state.set_state(Settings.editing_filters_sex)

    elif text == "–•–æ–±–±–∏":
        await msg.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —Ö–æ–±–±–∏ –∫–Ω–æ–ø–æ—á–∫–∞–º–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ",
                         reply_markup=hobby_kb())
        await state.set_state(Settings.editing_filters_hobby)
        await state.update_data(hobby=[])

    elif text == "–¶–µ–ª–∏":
        await msg.answer("–í—ã–±–µ—Ä–∏ —Ü–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞", reply_markup=s_kb)
        await state.set_state(Settings.editing_filters_ftype)

    elif text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)

    else:
        await msg.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")

@router.message(Settings.awaiting_delete_confirm_text)
async def process_delete_confirmation(msg: Message, state: FSMContext):
    if msg.text.lower() == "—É–¥–∞–ª–∏—Ç—å":
        user = User.get(tg_id=msg.from_user.id)
        if user:
            user.delete()
        await msg.answer("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.", reply_markup=None)
        await state.clear()
    else:
        await msg.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)

# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.message(Settings.editing_age)
async def edit_age(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return
    try:
        age = int(msg.text.strip())
        if not (9 <= age <= 99):
            raise ValueError()
    except:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
        return

    User.get(tg_id=msg.from_user.id).update(age=age)
    await msg.answer(f"–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {age}", reply_markup=settings_kb)
    await state.set_state(Settings.choosing_action)

# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∏–æ
@router.message(Settings.editing_bio)
async def edit_bio(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return
    bio = msg.text.strip()

    if len(bio) > 1500:
        await msg.answer("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑")
        return

    if not re.fullmatch(r"^[^<>\/\\]+$", bio):
        await msg.answer("–ë–∏–æ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã: < > / \\")
        return

    User.get(tg_id=msg.from_user.id).update(bio=bio)
    await msg.answer("–ë–∏–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=settings_kb)
    await state.set_state(Settings.choosing_action)

# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∞
@router.message(Settings.editing_gender)
async def edit_gender(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return
    sex_value = msg.text.strip()
    gender = next((g for g in Gender if g.value == sex_value), None)
    if gender is None:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª. –í—ã–±–µ—Ä–∏ –µ–≥–æ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
        return
    User.get(tg_id=msg.from_user.id).update(sex=gender.value)
    await msg.answer(f"–ü–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {gender.value}", reply_markup=settings_kb)
    await state.set_state(Settings.choosing_action)

# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
@router.message(Settings.editing_city)
async def edit_city(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return

    geo = validate_city(msg.text)
    if geo is None:
        await msg.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
        return

    User.get(tg_id=msg.from_user.id).update(geo=geo.dict())
    await msg.answer(f"–ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω: {geo.city}", reply_markup=settings_kb)
    await state.set_state(Settings.choosing_action)

# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–æ–±–±–∏
@router.message(Settings.editing_hobby)
async def edit_hobby(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return

    if msg.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        data = await state.get_data()
        if not data.get("hobby") or data.get("hobby") == []:
            await msg.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ö–æ–±–±–∏ üò≠")
            return
        current = data.get("hobby", [])
        User.get(tg_id=msg.from_user.id).update(hobby=current)
        return

    hobby_value = msg.text
    data = await state.get_data()
    current = data.get("hobby", [])

    hobby = next((h for h in Hobby if h.value == re.sub(r"^(‚úÖ\s*)+", "", msg.text).strip()), None)
    if not hobby:
        await msg.answer("–í—ã–±–µ—Ä–∏ —Ö–æ–±–±–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=hobby_kb(current))
        return

    if hobby_value in current:
        current.remove(hobby_value)
    else:
        current.append(hobby_value)

    await state.update_data(hobby=current)
    await msg.answer("–•–æ–±–±–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=hobby_kb(current))

# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
@router.message(Settings.editing_orientation)
async def edit_orientation(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return
    ori = msg.text.strip()
    if ori not in [o.value for o in Orientation]:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è, –≤—ã–±–µ—Ä–∏ –µ—ë –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
        return
    User.get(tg_id=msg.from_user.id).update(orientation=ori)
    await msg.answer(f"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {ori}", reply_markup=settings_kb)
    await state.set_state(Settings.choosing_action)

# –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –∑–∞–≥—Ä—É–∑–∫–∞
@router.message(Settings.editing_media, F.content_type.in_(["photo", "video"]))
async def media_upload(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return

    data = await state.get_data()
    media = data.get("media", [])
    if len(media) >= 4:
        await msg.answer("–£–∂–µ –µ—Å—Ç—å 4 –º–µ–¥–∏–∞, –∂–º–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å)")
        return
    fid = msg.photo[-1].file_id if msg.photo else msg.video.file_id
    media.append(fid)
    await state.update_data(media=media)
    await msg.answer(f"–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ –º–µ–¥–∏–∞, –º–æ–∂–Ω–æ –µ—â—ë {4 - len(media)}")

@router.message(Settings.editing_media, F.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
async def media_done(msg: Message, state: FSMContext):
    data = await state.get_data()
    media = data.get("media", [])
    User.get(tg_id=msg.from_user.id).update(media=media)
    await msg.answer("–§–æ—Ç–æ/–≤–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=settings_kb)
    await state.set_state(Settings.choosing_action)

@router.message(Settings.editing_media, F.text == "üîô –ù–∞–∑–∞–¥")
async def media_back(msg: Message, state: FSMContext):
    await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
    await state.set_state(Settings.choosing_action)

# —Ñ–∏–ª—å—Ç—Ä –≤–æ–∑—Ä–∞—Å—Ç
@router.message(Settings.editing_filters_age)
async def edit_filters_age(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return

    try:
        from_age, to_age = msg.text.strip().split("-")
        from_age, to_age = int(from_age), int(to_age)
        if from_age > to_age or from_age < 9:
            raise ValueError()
    except:
        await msg.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–¥–∏—É—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 18-25), –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
        return

    user = User.get(tg_id=msg.from_user.id)
    filters = user.filters
    filters.age_from = from_age
    filters.age_to = to_age
    user.update(filters=filters.model_dump())
    await msg.answer(f"–§–∏–ª—å—Ç—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {from_age}-{to_age}", reply_markup=settings_kb)
    await state.set_state(Settings.choosing_action)

# —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª
@router.message(Settings.editing_filters_sex)
async def edit_filters_sex(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return

    sex_value = msg.text.strip()
    if sex_value != "–ù–µ –≤–∞–∂–Ω–æ":
        gender = next((g for g in Gender if g.value == sex_value), None)
        if gender is None:
            await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª. –í—ã–±–µ—Ä–∏ –µ–≥–æ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
            return
        sex_value = [gender]
    else:
        sex_value = [Gender.male, Gender.female, Gender.other]

    user = User.get(tg_id=msg.from_user.id)
    filters = user.filters
    filters.sex = sex_value
    user.update(filters=filters.model_dump())
    await msg.answer(f"–§–∏–ª—å—Ç—Ä –ø–æ–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {', '.join([g.value for g in sex_value])}", reply_markup=settings_kb)
    await state.set_state(Settings.choosing_action)

# —Ñ–∏–ª—å—Ç—Ä —Ö–æ–±–±–∏
@router.message(Settings.editing_filters_hobby)
async def edit_filters_hobby(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return

    data = await state.get_data()
    current = data.get("filters_hobby", [])

    if msg.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not data.get("filters_hobby") or data.get("filters_hobby") == []:
            await msg.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ö–æ–±–±–∏ üò≠")
            return
        user = User.get(tg_id=msg.from_user.id)
        filters = user.filters
        filters.hobby = current
        user.update(filters=filters.model_dump())

        await msg.answer("–§–∏–ª—å—Ç—Ä —Ö–æ–±–±–∏ –æ–±–Ω–æ–≤–ª—ë–Ω", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return

    hobby = next((h for h in Hobby if h.value == re.sub(r"^(‚úÖ\s*)+", "", msg.text).strip()), None)
    if not hobby:
        await msg.answer("–í—ã–±–µ—Ä–∏ —Ö–æ–±–±–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=hobby_kb(current))
        return

    if hobby in current:
        current.remove(hobby)
    else:
        current.append(hobby)

    await state.update_data(filters_hobby=current)
    await msg.answer("–•–æ–±–±–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=filters_hobby_kb(current))


# —Ñ–∏–ª—å—Ç—Ä —Ü–µ–ª–∏
@router.message(Settings.editing_filters_ftype)
async def edit_filters_ftype(msg: Message, state: FSMContext):
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_kb)
        await state.set_state(Settings.choosing_action)
        return

    text = msg.text.strip().lower()

    if text == "—á—Ç–æ —É–≥–æ–¥–Ω–æ":
        selected_ftypes = [FType.basic, FType.romantic]
    elif text == "–æ–±—â–µ–Ω–∏–µ":
        selected_ftypes = [FType.basic]
    elif text == "–æ—Ç–Ω–æ—à–µ–Ω–∏—è":
        selected_ftypes = [FType.romantic]
    else:
        await msg.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=s_kb)
        return

    user = User.get(tg_id=msg.from_user.id)
    filters = user.filters
    filters.ftype = selected_ftypes
    user.update(filters=filters.model_dump())

    await msg.answer(f"–§–∏–ª—å—Ç—Ä —Ü–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω: {', '.join([f.value for f in selected_ftypes])}", reply_markup=settings_kb)
    await state.set_state(Settings.choosing_action)
